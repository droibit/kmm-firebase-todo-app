rules_version = '2';
service cloud.firestore {

  match /databases/{database}/documents {

    match /users/{userId} {
      allow read: if isUserAuthenticated(); 

      match /tasks/{taskId} {
        allow read, delete: if isUserAuthenticated();
        allow create: if isUserAuthenticated()
                      && isValidTaskScheme(incomingData())
                      && canCreateTask(incomingData());
        allow update: if isUserAuthenticated()
                      && isValidTaskScheme(incomingData())
                      && canUpdateTask(incomingData(), existingData());

        function isValidTaskScheme(task) {
          return task.size() == 5 
            && 'title' in task && task.title is string
            && 'description' in task && task.description is string
            && 'completed' in task && task.completed is bool
            && 'createdAt' in task && task.createdAt is timestamp
            && 'updatedAt' in task && task.updatedAt is timestamp;
        }

        function canCreateTask(task) {
          return hasSize(task.title, 1, 100)
            && hasSize(task.description, 0, 500)
            && task.completed == false
            && task.createdAt == request.time
            && task.updatedAt == request.time;
        }

        function canUpdateTask(newTask, oldTask) {
          return hasSize(newTask.title, 1, 100)
            && hasSize(newTask.description, 0, 500)
            && newTask.createdAt == oldTask.createdAt
            && newTask.updatedAt == request.time;
        }
      }

      match /statistics/{statisticsId} {
        allow read: if isUserAuthenticated() 
                    && statisticsId == 'task';
      }

      function isUserAuthenticated() {
        return isAuthenticated() && request.auth.uid == userId;
      }
    }

    function isAuthenticated() {
      return request.auth != null;
    }

    function existingData() {
      return resource.data;
    }
    function incomingData() {
      return request.resource.data;
    }

    function hasSize(value, min, max) {
      return min <= value.size() && value.size() <= max;
    } 
  }
}
